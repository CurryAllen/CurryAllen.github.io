<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CurryAllen</title>
  
  <subtitle>CurryAllen</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-15T12:38:49.524Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>CurryAllen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>随便写写</title>
    <link href="http://yoursite.com/2019/06/15/%E9%9A%8F%E4%BE%BF%E5%86%99%E5%86%99/"/>
    <id>http://yoursite.com/2019/06/15/随便写写/</id>
    <published>2019-06-15T12:33:05.422Z</published>
    <updated>2019-06-15T12:38:49.524Z</updated>
    
    <content type="html"><![CDATA[<p>花费了一天半的时间吧，把这个基于HEXO+NEXT主题+github的博客搭起来了。感觉还行，评论，阅读量等功能也弄好了，其余的剩下慢慢整吧。</p><p>为什么会搭这个博客呢？ 一开始其实是想上手一个github的基于JAVA开发的博客开源项目，好像是叫HALO， 奈何自己太菜，整不明白。所以先搭一个博客熟悉熟悉，顺便想在这里记录下自己学习的一些东西吧。</p><p>正好这学期课不是很多，希望能把时间用来多学一点东西吧。</p><p>嗯，看看两个月后这里会有几篇博文。</p><p>先这样吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;花费了一天半的时间吧，把这个基于HEXO+NEXT主题+github的博客搭起来了。感觉还行，评论，阅读量等功能也弄好了，其余的剩下慢慢整吧。&lt;/p&gt;
&lt;p&gt;为什么会搭这个博客呢？ 一开始其实是想上手一个github的基于JAVA开发的博客开源项目，好像是叫HALO， 奈何
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Leetcode刷题日记_1</title>
    <link href="http://yoursite.com/2019/06/15/Leetcode%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-1/"/>
    <id>http://yoursite.com/2019/06/15/Leetcode刷题日记-1/</id>
    <published>2019-06-15T05:21:14.000Z</published>
    <updated>2019-06-15T12:39:48.407Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Leetcode-2019-6-15"><a href="#Leetcode-2019-6-15" class="headerlink" title="Leetcode 2019.6.15"></a>Leetcode 2019.6.15</h1><p>这是这个博客建立来的第一篇博客，用来记录自己的leetcode刷题记录吧，每天三道题，看看自己能坚持多久~~</p><h2 id="3-Longest-Substring-Without-Repeating-Characters-Medium"><a href="#3-Longest-Substring-Without-Repeating-Characters-Medium" class="headerlink" title="3. Longest Substring Without Repeating Characters(Medium)"></a>3. Longest Substring Without Repeating Characters(Medium)</h2><p>Given a string, find the length of the longest substring without repeating characters.</p><p>Example 1:</p><p>Input: “abcabcbb”<br>Output: 3<br>Explanation: The answer is “abc”, with the length of 3.<br>Example 2:</p><p>Input: “bbbbb”<br>Output: 1<br>Explanation: The answer is “b”, with the length of 1.<br>Example 3:</p><p>Input: “pwwkew”<br>Output: 3<br>Explanation: The answer is “wke”, with the length of 3. </p><p>这道题参考的idea来自另一篇博文</p><blockquote><p><a href="https://www.cnblogs.com/grandyang/p/4480780.html" target="_blank" rel="noopener">https://www.cnblogs.com/grandyang/p/4480780.html</a></p></blockquote><p>先暂且不考虑代码的实现，如果举一个题目中的例子”abcabcbb”, 这时候我们要怎么找到没有重复的字串呢？</p><p>应该是先一个一个字符的遍历，先a,b,c,然后重复出现a，我们去掉第一次出现的a，继续遍历, 遇到重复的b，去掉之前出现过的b，以此类推。最后得到无重复字符的字串长度为3。</p><p>因此，我们需要记录的其实是之前出现过的字符。而实际上，我们先前模拟的其实是一个sliding window（滑动窗口），窗口内是没有出现过的字符，我们需要尽可能的扩展窗口的大小。窗口在向右滑动的过程中，我们只要知道每个字符最后出现的位置，以此建立映射。 最后这个滑动窗口的大小size就是我们的result。 </p><p>为了求出这个result，我们需要一个left变量来指向滑动窗口的左边界，如果遍历到的字符没有出现过，我们扩大右边界，如果出现过，分两种情况讨论。一是当前字符已经出现在滑动窗口内，我们需要把已在滑动窗口内的字符去掉，再加进来。去掉的方法是通过移动left指针，因为之前的Hashmap已经保存了该重复字符最后出现的位置，所以我们只要移动left指针的位置即可。第二种情况是该字符已经存储在Hashmap内但没有在滑动窗口内，这时我们可以直接加到滑动窗口内。最后，我们只维护一个res结果，每次用出现的窗口大小和res 本身比较，就可以得到最终结果。</p><p>我们这里建的Hashmap，是建立每个字符和其最后出现位置之间的映射。变量res是用来记录最长无重复字串的长度，left是指向该无重复字串左边起始位置的前一个。</p><p>Hashmap我们可以用一个256 或128位大小的整型数组来代替。因为ASCii表只有256个字符，然而键盘只能表示128个，所以用128也行。将所有位置初始为-1，然后遍历字符串。</p><p><strong>AC代码</strong></p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Solution &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">int</span> lengthOfLongestSubstring(<span class="built_in">string</span> s) &#123;</span><br><span class="line">        vector&lt;<span class="built_in">int</span>&gt;m(<span class="number">256</span>,<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">int</span> <span class="built_in">left</span>=<span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> <span class="built_in">len</span>=s.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">len</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">left</span>=max(<span class="built_in">left</span>,m[s[i]]);</span><br><span class="line">            m[s[i]]=i;</span><br><span class="line">            res=max(res,i-<span class="built_in">left</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="102-Binary-Tree-Level-Order-Traversal"><a href="#102-Binary-Tree-Level-Order-Traversal" class="headerlink" title="102. Binary Tree Level Order Traversal"></a>102. Binary Tree Level Order Traversal</h2><p>Given a binary tree, return the level order traversal of its nodes’ values. (ie, from left to right, level by level).</p><p>For example:<br>Given binary tree [3,9,20,null,null,15,7],<br>    3<br>   / <br>  9  20<br>    /  <br>   15   7<br>return its level order traversal as:<br>[<br>  [3],<br>  [9,20],<br>  [15,7]<br>]</p><blockquote><p><a href="https://www.cnblogs.com/grandyang/p/4051321.html" target="_blank" rel="noopener">https://www.cnblogs.com/grandyang/p/4051321.html</a><br><a href="https://www.cnblogs.com/grandyang/p/4051326.html" target="_blank" rel="noopener">https://www.cnblogs.com/grandyang/p/4051326.html</a></p></blockquote><p>这道题我用的递归写法，思路和上边的博文一样，用一个变量level来标记当前的深度，一开始带入0，代表根节点所在的深度。因为返回的是一个二维数组res，一开始我们不知道而二叉树的深度，不知道有多少层，因此我们无法事先申请好二维数组的大小，只有在遍历的过程中增加层的大小。</p><p>那什么时候应该申请新的一层？ 当level等于当前二维数组的大小的时候。为啥是等于呢，不是说要超过当前的深度么，这是因为level是从0开始的，就好比一个长度为n的数组A，你访问A[n]是会出错的，当level等于数组的长度时，就已经需要新申请一层了，我们新建一个空层，继续往里面加数字，AC代码如下：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree <span class="keyword">node</span>.<span class="title"></span></span><br><span class="line"><span class="title"> * struct</span> TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode *left;</span><br><span class="line"> *     TreeNode *right;</span><br><span class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector<span class="tag">&lt;vector&lt;int&gt;</span>&gt; levelOrder(TreeNode* root) &#123;</span><br><span class="line">        vector<span class="tag">&lt;vector&lt;int&gt;</span>&gt; res;</span><br><span class="line">        levelorder(root,<span class="number">0</span>,res);</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">    void levelorder(TreeNode* <span class="keyword">node</span><span class="title">, int</span> level, vector<span class="tag">&lt;vector&lt;int&gt;</span>&gt;&amp; res) </span><br><span class="line">    &#123;</span><br><span class="line">        if(!<span class="keyword">node</span><span class="title">) return</span> ;</span><br><span class="line">        if(res.size()==level) res.push_back(&#123;&#125;);</span><br><span class="line">        res[level].push_back(<span class="keyword">node</span><span class="title">-&gt;val</span>);</span><br><span class="line">        if(<span class="keyword">node</span><span class="title">-&gt;left</span>) levelorder(<span class="keyword">node</span><span class="title">-&gt;left</span>,level+<span class="number">1</span>, res);</span><br><span class="line">        if(<span class="keyword">node</span><span class="title">-&gt;right</span>) levelorder(<span class="keyword">node</span><span class="title">-&gt;right</span>,level+<span class="number">1</span>,res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="107-Binary-Tree-Level-Order-Traversal-II"><a href="#107-Binary-Tree-Level-Order-Traversal-II" class="headerlink" title="107. Binary Tree Level Order Traversal II"></a>107. Binary Tree Level Order Traversal II</h2><p>Given a binary tree, return the bottom-up level order traversal of its nodes’ values. (ie, from left to right, level by level from leaf to root).</p><p>For example:<br>Given binary tree [3,9,20,null,null,15,7],<br>    3<br>   / <br>  9  20<br>    /  <br>   15   7<br>return its bottom-up level order traversal as:<br>[<br>  [15,7],<br>  [9,20],<br>  [3]<br>]</p><p>这题和上边一题其实思路一样，先从顶部遍历，只是最后存储的方式不同（用rbegin和rend来逆序存储）。</p><p>直接上AC代码吧：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree <span class="keyword">node</span>.<span class="title"></span></span><br><span class="line"><span class="title"> * struct</span> TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode *left;</span><br><span class="line"> *     TreeNode *right;</span><br><span class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector<span class="tag">&lt;vector&lt;int&gt;</span>&gt; levelOrderBottom(TreeNode* root) &#123;</span><br><span class="line">        vector<span class="tag">&lt;vector&lt;int&gt;</span>&gt; res;</span><br><span class="line">        levelorder(root,<span class="number">0</span>,res);</span><br><span class="line">        return vector<span class="tag">&lt;vector&lt;int&gt;</span>&gt;(res.rbegin(),res.rend());</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    void levelorder(TreeNode* <span class="keyword">node</span><span class="title">, int</span> level, vector<span class="tag">&lt;vector&lt;int&gt;</span>&gt;&amp; res) </span><br><span class="line">    &#123;</span><br><span class="line">        if(!<span class="keyword">node</span><span class="title">) return</span> ;</span><br><span class="line">        if(res.size()==level) res.push_back(&#123;&#125;);</span><br><span class="line">        res[level].push_back(<span class="keyword">node</span><span class="title">-&gt;val</span>);</span><br><span class="line">        if(<span class="keyword">node</span><span class="title">-&gt;left</span>) levelorder(<span class="keyword">node</span><span class="title">-&gt;left</span>,level+<span class="number">1</span>, res);</span><br><span class="line">        if(<span class="keyword">node</span><span class="title">-&gt;right</span>) levelorder(<span class="keyword">node</span><span class="title">-&gt;right</span>,level+<span class="number">1</span>,res);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Leetcode-2019-6-15&quot;&gt;&lt;a href=&quot;#Leetcode-2019-6-15&quot; class=&quot;headerlink&quot; title=&quot;Leetcode 2019.6.15&quot;&gt;&lt;/a&gt;Leetcode 2019.6.15&lt;/h1&gt;&lt;p&gt;这是这个博客
      
    
    </summary>
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="刷题日记" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/06/14/hello-world/"/>
    <id>http://yoursite.com/2019/06/14/hello-world/</id>
    <published>2019-06-14T12:47:53.366Z</published>
    <updated>2019-06-14T12:47:53.366Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
